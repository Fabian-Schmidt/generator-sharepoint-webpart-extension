var gulp = require('gulp');
var gutil = require('gulp-util');
var webpack = require("webpack");
var WebpackDevServer = require("webpack-dev-server");
var webpackConfig = require("./webpack.config.js");
var gulpif = require('gulp-if');
var spSync = require('gulp-sharepoint-sync');
var runSequence = require('run-sequence');
var del = require('del');
var htmlmin = require('gulp-htmlmin');
var replace = require('gulp-replace');
var inquirer = require('inquirer');
var fs = require("fs");
var path = require("path");
var assign = require('object-assign');

var paths = {
    source: "./src/",
    source_assets: "./src/" + "assets/**/*",
    source_dwp: "./src/" + "*.dwp",
    source_html: "./src/" + "**/*.html",
    source_css: "./src/" + "css/**/*.css",
    source_ts: "./src/" + "js/**/*.ts",
    source_js: "./src/" + "js/**/*.js",

    release: "./release/",
    release_assets: "./release/" + "assets/",
    release_dwp: "./release/" + "",
    release_html: "./release/" + "",
    release_css: "./release/" + "app.min.css",
    release_js: "./release/" + "app.min.js",
    release_jsmap: "./release/" + "app.min.js.map",

    source_nuget_lib: './NuGet_lib/**/*',
    source_nuget_tools: './NuGet_tools/**/*',

    nuget_lib: './lib/',
    nuget_tools: './tools/'
};

var spSync_devSettings = {
    site: process.env.SPSYNC_SITECOLLECTIONURL,
    authenticationMethod: ((process.env.SPSYNC_AUTHENTICATIONMETHOD) ? process.env.SPSYNC_AUTHENTICATIONMETHOD : 'ADAL'),
    auth_username: undefined,
    auth_clientId: process.env.SPSYNC_CLIENTID,
    auth_clientSecret: gutil.env.SPSYNC_CLIENTSECRET
};
try {
    spSync_devSettings = assign(spSync_devSettings, require('../dev.json'));
} catch (err) {
    gutil.log("No ../dev.json file found.")
}
var packageSettings = require('./package.json');
var spSync_AppFolder = '/_catalogs/theme/company/' + packageSettings.name;
var spSync_Connection = null;
gulp.task('authenticate', function (done) {
    if (spSync_devSettings.authenticationMethod === 'ADAL') {
        inquirer.prompt({
            type: 'password',
            name: 'pass',
            message: 'Please enter password for user "' + spSync_username + '":'
        }, function (answers) {
            spSync_Connection = spSync.create({
                site: spSync_devSettings.site,
                authenticationMethod: spSync_devSettings.authenticationMethod,
                auth_username: spSync_devSettings.auth_username,
                auth_password: answers.pass,
                parallel: 5,
                log: gutil.log,
                logLevel: 2
            });
            done();
        });
    } else {
        spSync_Connection = spSync.create({
            site: spSync_devSettings.site,
            authenticationMethod: spSync_devSettings.authenticationMethod,
            auth_clientId: spSync_devSettings.auth_clientId,
            auth_clientSecret: spSync_devSettings.auth_clientSecret,
            parallel: 5,
            log: gutil.log,
            logLevel: 2
        });
        done();
    }
});

var spSync_WebPartFolder = '/_catalogs/wp';
var WebPackDevServerActive = false;/* Updated by script on watch command. */
var WebPackDevServerPort = 8080;
var ErrorInHTML = false;

gulp.task('clean:release', function () {
    return del([paths.release]);
});
gulp.task('clean:NuGet_lib', function () {
    return del([paths.nuget_lib]);
});
gulp.task('clean:NuGet_tools', function () {
    return del([paths.nuget_tools]);
});
gulp.task('clean', ['clean:release', 'clean:NuGet_lib', 'clean:NuGet_tools']);

gulp.task('app:Assets', function () {
    return gulp.src(paths.source_assets)
        .pipe(gulp.dest(paths.release_assets));
});
gulp.task('app:Dwp', function () {
    return gulp.src(paths.source_dwp)
        .pipe(replace(/{ExtensionFolder}/g, spSync_AppFolder))
        .pipe(gulp.dest(paths.release_dwp));
});
gulp.task('app:Html', function () {
    ErrorInHTML = false;
    return gulp.src(paths.source_html)
        .pipe(replace(/{Revision}/g, new Date().getTime()))
        .pipe(replace(/{ExtensionFolder}/g, spSync_AppFolder))
        .pipe(htmlmin({
            collapseWhitespace: true,
            conservativeCollapse: true,
            collapseBooleanAttributes: true,
            removeCommentsFromCDATA: true,
            removeOptionalTags: true
        }))
        .on('error', function (error) {
            ErrorInHTML = true;
            gutil.log(error.toString());
            this.emit('end');
        })
        .pipe(gulpif(!ErrorInHTML, gulp.dest(paths.release_html)))
});
gulp.task('app:NuGet_lib', function () {
    return gulp.src(paths.source_nuget_lib)
        .pipe(gulp.dest(paths.nuget_lib));
});
gulp.task('app:NuGet_tools', function () {
    return gulp.src(paths.source_nuget_tools)
        .pipe(replace(/{ExtensionFolder}/g, spSync_AppFolder))
        .pipe(gulp.dest(paths.nuget_tools));
});
gulp.task('app', ['app:Assets', 'app:Dwp', 'app:Html', 'app:NuGet_lib', 'app:NuGet_tools']);

gulp.task('upload:EnableWebPackDevServer', function () {
    WebPackDevServerActive = true;
});
gulp.task('upload:Assets', function () {
    return gulp.src(paths.release_assets + '*')
        .pipe(spSync_Connection.differentSize(spSync_AppFolder + '/assets'))
        .pipe(gulpif(!ErrorInHTML, spSync_Connection.dest(spSync_AppFolder + '/assets')));
});
gulp.task('upload:Dwp', function () {
    return gulp.src(paths.release_dwp + '*.dwp')
        .pipe(replace(/{SiteCollectionUrl}/g, spSync_devSettings.site.replace(/[//]$/, '')))
        .pipe(spSync_Connection.differentSize(spSync_WebPartFolder))
        .pipe(gulpif(!ErrorInHTML, spSync_Connection.dest(spSync_WebPartFolder)));
});
gulp.task('upload:Html', function () {
    return gulp.src(paths.release_html + '*.html')
        .pipe(gulpif(WebPackDevServerActive, replace(/{SiteCollectionUrl}/g, "https://localhost:" + WebPackDevServerPort)))
        .pipe(gulpif(!WebPackDevServerActive, replace(/{SiteCollectionUrl}/g, spSync_devSettings.site.replace(/[//]$/, ''))))

        .pipe(gulpif(WebPackDevServerActive, replace(/$/, '<script src="https://localhost:' + WebPackDevServerPort + '/webpack-dev-server.js"></script>')))
        .pipe(gulpif(!ErrorInHTML, spSync_Connection.dest(spSync_AppFolder)));
});

gulp.task('upload', function (callback) {
    runSequence(
        'authenticate',
        ['upload:Assets', 'upload:Dwp', 'upload:Html'],
        callback);
});

// Production build
gulp.task('build', function (callback) {
    runSequence('clean',
        ['webpack:build', 'app'],
        callback);
});

// Development build
gulp.task('build-dev', function (callback) {
    runSequence('clean',
        ['webpack:build-dev', 'app'],
        callback);
});

gulp.task('buildAndUpload', function (callback) {
    runSequence(
        ['app'],
        'authenticate',
        ['upload:Assets', 'upload:Dwp', 'upload:Html'],
        callback);
});

gulp.task('watch', ['upload:EnableWebPackDevServer', 'buildAndUpload'], function () {
    gulp.watch(paths.source_dwp, function () {
        runSequence('app:Assets',
            'upload:Assets');
    });
    gulp.watch(paths.source_dwp, function () {
        runSequence('app:Dwp',
            'upload:Dwp');
    });
    gulp.watch(paths.source_html, function () {
        runSequence('app:Html',
            'upload:Html');
    });
    runSequence('webpack-dev-server');
});


gulp.task("webpack:build", function (callback) {
    // modify some webpack config options
    var myConfig = Object.create(webpackConfig);
    myConfig.plugins = myConfig.plugins.concat(
        new webpack.DefinePlugin({
            "process.env": {
                // This has effect on the react lib size
                "NODE_ENV": JSON.stringify("production")
            }
        }),
        new webpack.optimize.OccurenceOrderPlugin(),
        new webpack.optimize.DedupePlugin(),
        new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false } })
    );

    // run webpack
    webpack(myConfig, function (err, stats) {
        if (err) throw new gutil.PluginError("webpack:build", err);
        gutil.log("[webpack:build]", stats.toString({
            colors: true
        }));
        callback();
    });
});

// modify some webpack config options
var myDevConfig = Object.create(webpackConfig);
myDevConfig.devtool = "sourcemap"; //'inline-source-map'
myDevConfig.debug = true;

// create a single instance of the compiler to allow caching
var devCompiler = webpack(myDevConfig);

gulp.task("webpack:build-dev", function (callback) {
    // run webpack
    devCompiler.run(function (err, stats) {
        if (err) throw new gutil.PluginError("webpack:build-dev", err);
        gutil.log("[webpack:build-dev]", stats.toString({
            colors: true
        }));
        callback();
    });
});

gulp.task("webpack-dev-server", function (callback) {
    // modify some webpack config options
    var myConfig = Object.create(webpackConfig);
    myConfig.devtool = "eval";
    myConfig.debug = true;
    //Inline mode and Hot Module Replacement of webpack dev server
    myConfig.entry.main.unshift('webpack/hot/only-dev-server');
    myConfig.entry.vendor.unshift('webpack/hot/only-dev-server');
    myConfig.plugins = myConfig.plugins.concat(
        new webpack.HotModuleReplacementPlugin()
    );
    myConfig.output.publicPath = "https://localhost:" + WebPackDevServerPort + spSync_AppFolder;
    //add react hot loader
    myConfig.module.loaders.unshift({ test: /\.tsx?$/, include: /src/, loader: 'react-hot-loader' });

    // Start a webpack-dev-server
    new WebpackDevServer(webpack(myConfig), {
        https: {
            key: fs.readFileSync(path.join(__dirname, "../dev.server.key")),
            cert: fs.readFileSync(path.join(__dirname, "../dev.server.crt")),
            ca: fs.readFileSync(path.join(__dirname, "../dev.ca.crt"))
        },
        hot: true,
        publicPath: myConfig.output.publicPath,
        stats: {
            colors: true
        },
        compress: true
    }).listen(WebPackDevServerPort, "localhost", function (err) {
        if (err) throw new gutil.PluginError("webpack-dev-server", err);
        gutil.log("[webpack-dev-server]", "https://localhost:" + WebPackDevServerPort + "/webpack-dev-server/index.html");
    });
});

// The development server (the recommended option for development)
gulp.task("default", ["watch"]);